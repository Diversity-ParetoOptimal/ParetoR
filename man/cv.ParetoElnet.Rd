% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ParetoElnet.R
\name{cv.ParetoElnet}
\alias{cv.ParetoElnet}
\title{cv.ParetoElnet}
\usage{
cv.ParetoElnet(data_cal = NULL, n_cal = NULL, D = NULL, R = NULL,
  n_val = 10000, lambda.grid = 10^seq(1, -2, length = 21),
  alpha.grid = seq(0, 1, length = 6), lambda2.grid = 50, prop, sr,
  Spac = 20)
}
\arguments{
\item{data_cal}{calibration data}

\item{n_cal}{Calibration data sample size}

\item{D}{Subgroup difference: standardized mean differences between minority and majority subgroups (i.e., majority - minority), on each predictor and criterion}

\item{R}{Correlation matrix: Criterion predictor inter-correlation matrix (in applicant pool); format: Predictor_1, ..., Predictor_n, Criterion}

\item{n_val}{validation data sample size}

\item{lambda.grid}{grid of lambda values to try}

\item{alpha.grid}{grid of alpha values to try}

\item{prop}{proportion of minority applicants in total applicant pool (#minority applicants/#total applicants)}

\item{sr}{selection ratio}

\item{Spac}{number of Pareto-optimal solutions}
}
\value{
alpha.best best alpha parameter value

lambda.best best lambda parameter value

out_cal.best calibration model output based on best alpha and lambda values
}
\description{
Cross-validation procedure to choose alpha and lambda values for regularized Pareto-optimal algorithm
}
\note{
Users could choose to use calibration sample data as input or calibration sample characteristic [i.e., calibration sample size (n_cal), subgroup difference in predictor and criterion (D), criterion and predictor correlation matrix (R)]
}
\examples{
#' ### Example 1 ###
# Calibration data as input
# (1) Calibration data
# Format: Predictor_1, ..., Predictor_n, Job Performance Validity, Race dummy variable (e.g., 0-minority; 1-majority)
# Example
load(data_cal)
# (2) Validation sample size
n_val = 10000
# (3) Grid of alpha values to try
# Example
alpha.grid <- seq(0,1,length=3)
# (4) Grid of lambda values to try
# Example
lambda.grid <- 10^seq(1,-2,length=11)
# (5) Proportion of minority applicants (prop) = (# of minority applicants)/(total # of applicants)
prop <- 1/4
# (6) Selection ratio (sr) = (# of selected applicants)/(total # of applicants)
sr <- 0.10
# (7) Spac = number of Pareto points
Spac <- 21
# Fit Regularized Pareto-optimal model with parameter selectoin via cross-validation
cv.out = cv.ParetoElnet(data_cal = data_cal, n_val = 10000, 
                        lambda.grid = lambda.grid, alpha.grid = alpha.grid,
                        prop = prop, sr = sr, Spac = Spac)
### Example 2 ###
# n_cal, D, R as input (input do not include calibration sample data set)
# (1) Calibration sample size
n_cal = 100
# (2) Subgroup differences (d): standardized mean differences between minority and majority subgroups (i.e., majority - minority), on each predictor and criterion (in applicant pool)
d <- c(1.00, 0.23, 0.09, 0.33, .30)
# (3) Correlation matrix (R) = Criterion predictor inter-correlation matrix 
# Format: Predictor_1, ..., Predictor_n, Criterion
R <- matrix(c(1, .24, .00, .19, .30,
              .24, 1, .12, .16, .30,
              .00, .12, 1, .51, .18,
              .19, .16, .51, 1, .28,
              .30, .30, .18, .28, 1),
            (length(d)+1),(length(d)+1))
# (4) Validation sample size
n_val = 10000
# (5) Grid of alpha values to try
# Example
alpha.grid <- seq(0,1,length=3)
# (6) Grid of lambda values to try
# Example
lambda.grid <- 10^seq(1,-2,length=11)
# (7) Proportion of minority applicants (prop) = (# of minority applicants)/(total # of applicants)
prop <- 1/4
# (8) Selection ratio (sr) = (# of selected applicants)/(total # of applicants)
sr <- 0.10
# (9) Spac = number of Pareto points
Spac <- 21
# Fit Regularized Pareto-optimal model with parameter selection via cross-validation
cv.out = cv.ParetoElnet(n_cal = n_cal, D = D, R = R,  
                        n_val = n_val, 
                        lambda.grid = lambda.grid, alpha.grid = alpha.grid,
                        prop = prop, sr = sr, Spac = Spac)

}
